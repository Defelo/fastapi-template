[tool.poetry]
name = "fastapi-template"
version = "0"
description = ""
authors = ["Defelo <elodef42@gmail.com>"]
readme = "README.md"
license = "GPL-3.0-only"
homepage = "https://github.com/Defelo/fastapi-template"
repository = "https://github.com/Defelo/fastapi-template"
packages = [{ include = "api" }]

[tool.poetry.dependencies]
python = "^3.10"
fastapi = "^0.84.0"
uvicorn = "^0.18.3"
aiohttp = "^3.8.1"
aioredis = "^2.0.1"
SQLAlchemy = "^1.4.40"
aiomysql = "^0.1.1"
asyncpg = "^0.26.0"
sentry-sdk = "^1.9.8"
pydantic = "^1.10.2"
httpx = "^0.23.0"
argon2-cffi = "^21.3.0"
PyJWT = "^2.3.0"
starlette = "^0.19.1"
alembic = "^1.8.1"
pyotp = "^2.6.0"
jq = "^1.2.2"

[tool.poetry.group.dev.dependencies]
flake8 = "^4.0.1"
isort = "^5.10.1"
black = "^22.8.0"
wemake-python-styleguide = "^0.16.1"
mypy = "^0.971"
SQLAlchemy = { extras = ["mypy"], version = "^1.4.40" }
pytest = "^7.1.3"
coverage = "^6.4"
pytest-asyncio = "^0.19.0"
pytest-mock = "^3.8.2"
aiosqlite = "^0.17.0"
rich = "^12.5.1"

[tool.poe.tasks]
api = { script = "api.main:main", envfile = ".env" }
flake8 = "flake8 . --count --statistics --show-source"
isort = "isort ."
black = "black ."
format = ["isort", "black"]
mypy = "mypy ."
lint = ["format", "mypy", "flake8"]
test = "pytest -v tests"
pre-commit = ["lint", "coverage"]
alembic = { cmd = "alembic", envfile = ".env" }
migrate = { cmd = "alembic upgrade head", envfile = ".env" }
env = { cmd = """python -c 'from api.settings import settings; from rich import print; print(settings)'""", envfile = ".env" }
jwt = { cmd = """python -c 'from api.utils import jwt; import sys, json; print(jwt.encode_jwt(json.loads(sys.argv[1]), jwt.timedelta(seconds=int(sys.argv[2]))))'""", envfile = ".env" }
hash-password = """python -c 'from api.utils import password_hasher; import sys, getpass; print(password_hasher.hash(sys.argv[1] if len(sys.argv) > 1 else getpass.getpass()))'"""

[tool.poe.tasks.coverage]
shell = """
set -e
coverage run -m pytest -v tests
if [[ "$check" != True ]]; then fail="--fail-under=0"; fi
if ! coverage report $fail; then c=2; fi
if [[ "$xml" = True ]]; then coverage xml --fail-under=0; fi
if [[ "$html" = True ]]; then coverage html --fail-under=0 && xdg-open htmlcov/index.html; fi
if [[ "$clean" = True ]]; then coverage erase; fi
exit $c
"""
interpreter = "bash"

[tool.poe.tasks.coverage.args.xml]
options = ["--xml"]
type = "boolean"

[tool.poe.tasks.coverage.args.html]
options = ["--html"]
type = "boolean"

[tool.poe.tasks.coverage.args.clean]
options = ["--no-clean"]
type = "boolean"
default = true

[tool.poe.tasks.coverage.args.check]
options = ["--no-check"]
type = "boolean"
default = true

[tool.poe.tasks.setup]
shell = """
set -ex
poetry install --sync
if ! [[ -e .env ]]; then cp fastapi.env .env; fi
./pre-commit.sh install
unset VIRTUAL_ENV
git submodule update --init
git submodule foreach 'poe setup'
"""
interpreter = "bash"

[tool.black]
target-version = ["py310"]
line-length = 120
skip-magic-trailing-comma = true

[tool.isort]
profile = "black"
py_version = 310
line_length = 120
lines_after_imports = 2
reverse_relative = true
known_local_folder = ["api", "tests"]
sections = ["FUTURE", "STDLIB", "FIRSTPARTY", "THIRDPARTY", "LOCALFOLDER"]

[tool.mypy]
strict = true
ignore_missing_imports = true
plugins = ["sqlalchemy.ext.mypy.plugin"]
exclude = ['^alembic/env\.py$']

[tool.pytest.ini_options]
asyncio_mode = "auto"
markers = ["user_params"]

[tool.coverage.run]
branch = true
source = ["api"]
omit = ["api/__main__.py", "tests/*"]
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
fail_under = 70
exclude_lines = ["if TYPE_CHECKING:", "if settings.debug:"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
